name: deploy workflow

on:
  pull_request:
    types: [ closed ]
    branches:
      - main
      - dev
  push:
    branches:
      - main
      - dev

jobs:
  build-and-push:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: copy project
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /home/ubuntu/app/profanity-filter-api
          remote_host: ${{ secrets.DEV_SERVER_IP }}
          remote_user: ubuntu
          remote_key: ${{ secrets.DEV_SSH_KEY }}

      ## deploy setup
      - name: deploy setup and gradle build
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /home/ubuntu/app/profanity-filter-api
            touch  /home/ubuntu/app/profanity-filter-api/module-api/src/main/resources/application-prod.yml
            touch  /home/ubuntu/app/profanity-filter-api/module-core/src/main/resources/application-prod.yml
            touch  /home/ubuntu/app/profanity-filter-api/module-domain/src/main/resources/application-prod.yml
            echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > module-api/src/main/resources/application-prod.yml  
            echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > module-core/src/main/resources/application-prod.yml  
            echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > module-domain/src/main/resources/application-prod.yml  
            chmod +x gradlew
            ./gradlew build -x test

      ## 개발 도커 실행
      - name: docker compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /home/ubuntu/app/profanity-filter-api
            docker stop profanity-filter-api || true
            docker rm profanity-filter-api || true
            docker-compose -f docker-compose-dev.yml up -d --no-deps --build profanity-filter-api
            docker image prune -f
